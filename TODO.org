* TODO more types
** the types
program = program( list(var), list((var,query)) )
found = foundElt int, foundSet set(int)
subst = map var found
queries take a substitution as well as the rest of what they take
** idiom : sequential variale assignments
*** need a set of substitutions, not a set of sets
 Consider this query:
   Commodities = Guns | Germs | Steel
   , X = "#give Y #to _"
   , "we #must X"
   , ##not Y #in Commodities
 X has an unconditional set of values, but
 the value of Y is conditional on the value of X.
*** there exists v. for all => sets
**** the problem
 Consider this "query":
   X = 3 | 4
   , Y = find( [1..10]
   , Y \= X
 Does it return [1..10] or  [1,2] ++ [5..10]?
**** a solution: sets
 The query as stated above should return [1..10].
 The language should also permit the creation of sets.
 So
   X = solve( 3 | 4 )
   , Y = find( [1..10]
   , not( Y in X )
 would return [1,2] ++ [5..10].
* TODO Gotchas
** pairs look like subtraction
Pairs are written (a - b), not (a,b). Import the pair library to do that. It works even if you've also imported int.
** lambdas cannot be curried
** I can't always tell when I need a lambda
This works:
  qSearch( qFuncOfVar( func(X) = X+1, var("X") ) )
but this:
  qSearch( qFuncOfVar( +(1),          var("X") ) )
throws this error:
  test.m:142: In clause for `testQSearch = out':
  test.m:142:   in argument 3 of call to predicate `runQSearch'/4:
  test.m:142:   in argument 1 of functor `qSearch/1':
  test.m:142:   mode error: variable `V_39' has instantiatedness `free',
  test.m:142:   expected instantiatedness for non-local variables of lambda goals
  test.m:142:   is `ground'.
* why doesn't this alternate definition of passesAllChecks work?
** in query.m
:- pred passesAllChecks2( list(qCond), int       ).
:- mode passesAllChecks2( in,          in        ) is semidet.
:- pred passesAllChecks2( list(qCond), int, bool ) is det.
:- mode passesAllChecks2( in,          in,  out  ) is det.

passesAllChecks2( Qs, Elt ) :-
  list.all_true( (pred( Q :: in ) is semidet :- checkQCond( Q, Elt ) )
               , Qs ).
passesAllChecks2( Qs, Elt, Res ) :-
  Res = (if passesAllChecks2( Qs, Elt ) then yes else no).
** in test.m
:- func testPassesAllChecks2 = list(bool).
testPassesAllChecks2 = [T1, T3, T5] :-
    Checks = [ qCond( func( Int ) = (if Int > 2 then yes else no) )
             , qCond( func( Int ) = (if Int < 4 then yes else no) ) ]
  , passesAllChecks2( Checks, 1, T1 )
  , passesAllChecks2( Checks, 3, T3 )
  , passesAllChecks2( Checks, 5, T5 ).

test.main ...
  , io.write_string( "testPassesAllChecks2: "
      ++ string(testPassesAllChecks2) ++ "\n", !IO)
* use sets
* test variants with alternate numbers of arguments
consider this bugfix, commit number 8e1a0bdf9114bb346eeb5358363716efd9d3e67c:
 checkQCond(    qCond(C), Elt, C(Elt) ).
 checkQCond(    qCond(C), Elt ) :-
-  checkQCond(  qCond(C), Elt, C(Elt) ).
+  checkQCond(  qCond(C), Elt, yes ).
* QNot 
** 1st iteration
:- type qCond ---> qNot( int ) ; ...
checkQCond( qNot(Int), Elt, Res ) :-
  Res = (if ( Elt \= Int )
        then yes else no).
:- func testQNot = bool.
testQNot = Res :-
    checkQCond( qNot(1), 1, Res1 )
  , checkQCond( qNot(1), 0, Res0 )
  , Res = (if [Res1, Res0] = [no,yes] then yes else no).
test.main ...
  io.write_string( "testQNot: "  \++ string(testQNot)  ++ "\n", !IO).
  % that \++ is just ++ to avoid strikethrough
** 2nd : QNot should hold an entire Query
* types
Index = Arity = Int
Expr :: Word String
  | Rel -- ^ connects to a template and to arity exprs(likely not templates).
  | Template -- ^ connects to arity exprs(likely all words).
Role :: RoleTemplate | RoleMember Int
Position = (Index of rel, Role) -- ^ "of rel", etc. : not enforced by types
  -- (This is like a position at an employer: it includes host and role.)
ExprImg :: Index
  | ImgWord String
  | ImgRel ImgExpr [ImgExpr] -- ^ first arg should be of a template
  | ImgTemplate [ImgExpr]
* functions
  arity :: ExprImg -> Index -- ^ words have arity 0. others require counting.
  indexMap :: ExprImg -> Index
  containerMap :: Index -> Set Position -- ^ what hold(s) it
  memberMap :: Position -> Index -- what it holds
